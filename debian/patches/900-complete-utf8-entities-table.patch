Description: Completed the utf8 table
 The utf8 table translates HTML entities into UTF8 characters. The table,
 introduced by patch 500, was quite incomplete. This patch completes it.
 .
 html2text (1.3.2a-17.nmu1) unstable; urgency=medium
 .
   * Completed the utf8 table. (Closes: 760588)
Author: Marcos Daniel Marado Torres <mindboosternoori@gmail.com>
Bug-Debian: https://bugs.debian.org/760588

--- /dev/null
+++ html2text-1.3.2a/Makefile
@@ -0,0 +1,138 @@
+
+#
+# This make file was generated from "Makefile.in" by "./configure" on
+# Fri Sep  5 17:46:37 WEST 2014 -- all your changes will be lost if you
+# run "./configure" again!
+#
+
+
+# -----------------------------------------------------------------------------
+#
+# Portions Copyright (c) 1999 GMRS Software GmbH
+# Carl-von-Linde-Str. 38, D-85716 Unterschleissheim, http://www.gmrs.de
+# All rights reserved.
+#
+# Author: Arno Unkrig <arno@unkrig.de>
+#
+# This program is free software; you can redistribute it and/or modify it under
+# the terms of the GNU General Public License as published by the Free Software
+# Foundation; either version 2 of the License, or (at your option) any later
+# version.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE. See the GNU General Public License in the file
+# COPYING for more details.
+#
+# -----------------------------------------------------------------------------
+#
+# Changes to version 1.2.2 were made by Martin Bayer <mbayer@zedat.fu-berlin.de>
+#
+# -----------------------------------------------------------------------------
+
+VERSION=1.3.2a
+
+BISONXX  = bison++
+YFLAGS   =
+
+INSTALLER = install
+BINDIR    = /usr/local/bin
+MANDIR    = /usr/local/man
+DOCDIR    = /usr/share/doc/html2text
+
+CXX                 = x86_64-linux-gnu-g++
+BOOL_DEFINITION     = 
+EXPLICIT            = 
+SYS_POLL_MISSING    = 
+SOCKET_LIBRARIES    = 
+LIBSTDCXX_INCLUDES  = 
+LIBSTDCXX_LIBS      = 
+AUTO_PTR_BROKEN     = -DAUTO_PTR_BROKEN
+MAKEDEPEND_INCLUDES = -I/usr/include -I/usr/include/c++/4.9 -I/usr/include/c++/4.9/backward -I/usr/include/c++/4.9/bits -I/usr/include/c++/4.9/debug -I/usr/include/c++/4.9/ext -I/usr/include/x86_64-linux-gnu/bits -I/usr/include/x86_64-linux-gnu/c++/4.9/bits -I/usr/include/x86_64-linux-gnu/gnu -I/usr/include/x86_64-linux-gnu/sys -I/usr/lib/gcc/x86_64-linux-gnu/4.9/include 
+
+INCLUDES  = $(LIBSTDCXX_INCLUDES)
+DEFINES   = -DVERSION=$(VERSION) $(SYS_POLL_MISSING) $(BOOL_DEFINITION) $(EXPLICIT) $(AUTO_PTR_BROKEN)
+CPPFLAGS  += $(INCLUDES) $(DEFINES)
+CXXFLAGS  += $(CPPFLAGS)
+LOADLIBES = $(LIBSTDCXX_LIBS) $(SOCKET_LIBRARIES)
+
+.SUFFIXES : .C .o
+
+.C.o :
+	$(CXX) -c $(CXXFLAGS) $*.C
+
+# -----------------------------------------------------------------------------
+
+default : all
+
+all : html2text
+	@echo ;
+	@echo 'Compilation completed. You may now move "html2text", "html2text.1.gz"';
+	@echo 'and "html2textrc.5.gz" to their installation directories (e.g.';
+	@echo '"/usr/local/bin", "/usr/local/man/man1" and "/usr/local/man/man5").';
+	@echo
+
+OBJS = html2text.o html.o HTMLControl.o HTMLParser.o Area.o format.o sgml.o table.o Properties.o cmp_nocase.o
+
+html2text : $(OBJS) $(LIBSTDCXX_LIBS)
+	$(CXX) $(LDFLAGS) $(OBJS) $(LOADLIBES) $(LDLIBS) -o $@
+
+libstd/libstd.a :
+	cd libstd && $(MAKE)
+
+# -----------------------------------------------------------------------------
+
+# Since it is very unlikely that bison++-2.2 is installed (available on
+# html2text's homepage), HTMLParser.h and HTMLParser.C are only built when
+# 'make bison-local' is issued.
+
+bison-local :
+	cmp -s HTMLParser.h HTMLParser.k || cp HTMLParser.k HTMLParser.h;
+	$(BISONXX) $(YFLAGS) -o HTMLParser.C -d -h HTMLParser.k HTMLParser.y
+
+# -----------------------------------------------------------------------------
+
+# This is mostly thought for RPM builts and users that don't read the documentation.
+
+install :
+	$(INSTALLER) -s -m 755 html2text $(BINDIR);
+	$(INSTALLER) -m 644 html2text.1.gz $(MANDIR)/man1;
+	$(INSTALLER) -m 644 html2textrc.5.gz $(MANDIR)/man5;
+	$(INSTALLER) -d -m 755 $(DOCDIR);
+	$(INSTALLER) -p -m 644 CHANGES COPYING CREDITS KNOWN_BUGS README RELEASE_NOTES TODO $(DOCDIR)
+
+# -----------------------------------------------------------------------------
+
+SUBDIRS = libstd
+
+# "./configure" creates "Makefile"s only in the subdirectories that need to
+# be built, so we check for the existance of these "Makefile".
+clean clobber depend :
+	@for i in $(SUBDIRS); do \
+	  if test -r $$i/Makefile; then \
+	    ( \
+	      cd $$i && echo "*** make $@ in `pwd`" && $(MAKE) $@ || \
+	      { echo "*** make $@ error in `pwd`" && false; } \
+	    ) || exit 1; \
+	    echo "*** Back in `pwd`"; \
+	  fi; \
+	done;
+
+clean : local-clean
+local-clean :
+	rm -f *.o *~ core html2text;
+
+clobber : local-clobber
+local-clobber : local-clean
+	rm -f html2text
+
+depend : local-depend
+local-depend : HTMLParser.h
+	@>Dependencies
+	makedepend -f Dependencies $(CPPFLAGS) $(MAKEDEPEND_INCLUDES) *.C
+	@rm -f Dependencies.bak
+
+# -----------------------------------------------------------------------------
+
+include Dependencies
+
--- html2text-1.3.2a.orig/sgml.C
+++ html2text-1.3.2a/sgml.C
@@ -109,9 +109,9 @@ static const struct TextToInt {
   { "Ouml",    LATIN1_Ouml,   "O\"", 0x00d6},
   { "Phi",     0,             "F",   0x03a6},
   { "Pi",      0,             "P",   0x03a0},
-  { "Prime",   0,             "''",        },
+  { "Prime",   0,             "''",  0x2032},
   { "Psi",     0,             "PS",  0x03a8},
-  { "QUOT",    0,             "\"",        },
+  { "QUOT",    0,             "\"",  0x0022},
   { "Rho",     0,             "R",   0x03a1},
   { "Scaron",  0,             "S",   0x0161},
   { "Sigma",   0,             "S",   0x03a3},
@@ -132,35 +132,35 @@ static const struct TextToInt {
   { "acute",   LATIN1_acute,  "'",   0x00b4},
   { "aelig",   LATIN1_aelig,  "ae",  0x00e6},
   { "agrave",  LATIN1_agrave, "a`",  0x00e0},
-  { "alefsym", 0,             "Aleph"      },
+  { "alefsym", 0,             "Aleph",0x2135},
   { "alpha",   0,             "a",   0x03b1},
-  { "amp",     0,             "&"          },
-  { "and",     0,             "AND"        },
-  { "ang",     0,             "-V"         },
-  { "apos",    0,             "'"          },
+  { "amp",     0,             "&",   0x0026},
+  { "and",     0,             "AND", 0x2227},
+  { "ang",     0,             "-V",  0x2220},
+  { "apos",    0,             "'",   0x0027},
   { "aring",   LATIN1_aring,  "aa",  0x00e5},
   { "asymp",   0,             "~=",  0x2248},
   { "atilde",  LATIN1_atilde, "a~",  0x00e3},
   { "auml",    LATIN1_auml,   "a\"", 0x00e4},
-  { "bdquo",   0,             "\""         },
+  { "bdquo",   0,             "\"",  0x201e},
   { "beta",    0,             "b",   0x03b2},
   { "brvbar",  LATIN1_brvbar, "|",   0x00a6},
   { "bull",    0,             " o ", 0x2022},
-  { "cap",     0,             "(U"         },
+  { "cap",     0,             "(U",  0x2229},
   { "ccedil",  LATIN1_ccedil, "c,",  0x00e7},
   { "cedil",   LATIN1_cedil,  ",",   0x00b8},
   { "cent",    LATIN1_cent,   "-c-", 0x00a2},
   { "chi",     0,             "h",   0x03c7},
   { "circ",    0,             "^",   0x005e},
 //  { "clubs",   0,             "[clubs]"    },
-  { "cong",    0,             "?="         },
+  { "cong",    0,             "?=",  0x2245},
   { "copy",    LATIN1_copy,   "(c)", 0x00a9},
-  { "crarr",   0,             "<-'"        },
-  { "cup",     0,             ")U"         },
+  { "crarr",   0,             "<-'", 0x21b5},
+  { "cup",     0,             ")U",  0x222a},
   { "curren",  LATIN1_curren, "CUR", 0x00a4},
-  { "dArr",    0,             "vv"         },
+  { "dArr",    0,             "vv",  0x2193},
   { "dagger",  0,             "+",   0x2020},
-  { "darr",    0,             "v"          },
+  { "darr",    0,             "v",   0x2193},
   { "deg",     LATIN1_deg,    "DEG", 0x00b0},
   { "delta",   0,             "d",   0x03b4},
 //  { "diams",   0,             "[diamonds]" },
@@ -168,145 +168,145 @@ static const struct TextToInt {
   { "eacute",  LATIN1_eacute, "e'",  0x00e9},
   { "ecirc",   LATIN1_ecirc,  "e^",  0x00ea},
   { "egrave",  LATIN1_egrave, "e`",  0x00e8},
-  { "empty",   0,             "{}"         },
+  { "empty",   0,             "{}",  0x2205},
   { "epsilon", 0,             "e",   0x03b5},
   { "equiv",   0,             "==",  0x2261},
   { "eta",     0,             "e",   0x03b7},
   { "eth",     LATIN1_eth,    "d-",  0x00f0},
   { "euml",    LATIN1_euml,   "e\"", 0x00eb},
   { "euro",    0,             "EUR", 0x20ac},
-  { "exist",   0,             "TE"         },
-  { "fnof",    0,             "f"          },
-  { "forall",  0,             "FA"         },
+  { "exist",   0,             "TE",  0x2203},
+  { "fnof",    0,             "f",   0x0192},
+  { "forall",  0,             "FA",  0x2200},
   { "frac12",  LATIN1_frac12, " 1/2",0x00bd},
   { "frac14",  LATIN1_frac14, " 1/4",0x00bc},
   { "frac34",  LATIN1_frac34, " 3/4",0x00be},
-  { "frasl",   0,             "/"          },
+  { "frasl",   0,             "/" ,  0x2044},
   { "gamma",   0,             "g",   0x03b3},
   { "ge",      0,             ">=",  0x2265},
   { "gt",      0,             ">",   0x003e},
-  { "hArr",    0,             "<=>"        },
-  { "harr",    0,             "<->"        },
+  { "hArr",    0,             "<=>", 0x21d4},
+  { "harr",    0,             "<->", 0x2194},
 //  { "hearts",  0,             "[hearts]"   },
   { "hellip",  0,             "...", 0x2026},
   { "iacute",  LATIN1_iacute, "i'",  0x00ed},
   { "icirc",   LATIN1_icirc,  "i^",  0x00ee},
   { "iexcl",   LATIN1_iexcl,  "!",   0x00a1},
   { "igrave",  LATIN1_igrave, "i`",  0x00ec},
-  { "image",   0,             "Im"         },
+  { "image",   0,             "Im",  0x2111},
   { "infin",   0,             "oo",  0x221e},
   { "int",     0,             "INT", 0x222b},
   { "iota",    0,             "i",   0x03b9},
   { "iquest",  LATIN1_iquest, "?",   0x00bf},
-  { "isin",    0,             "(-"         },
+  { "isin",    0,             "(-",  0x2208},
   { "iuml",    LATIN1_iuml,   "i\"", 0x00ef},
   { "kappa",   0,             "k",   0x03ba},
-  { "lArr",    0,             "<="         },
+  { "lArr",    0,             "<=",  0x2190},
   { "lambda",  0,             "l",   0x03bb},
-  { "lang",    0,             "</"         },
-  { "laquo",   LATIN1_laquo,  "<<"         },
+  { "lang",    0,             "</",  0x2329},
+  { "laquo",   LATIN1_laquo,  "<<",  0x00ab},
   { "larr",    0,             "<-",  0x2190},
 //  { "lceil",   0,             "<|"         },
-  { "ldquo",   0,             "\""         },
+  { "ldquo",   0,             "\"",  0x201c},
   { "le",      0,             "<=",  0x2264},
 //  { "lfloor",  0,             "|<"         },
-  { "lowast",  0,             "*"          },
-  { "loz",     0,             "<>"         },
-  { "lsaquo",  0,             "<"          },
-  { "lsquo",   0,             "`"          },
+  { "lowast",  0,             "*",   0x2217},
+  { "loz",     0,             "<>",  0x25ca},
+  { "lsaquo",  0,             "<",   0x2039},
+  { "lsquo",   0,             "`",   0x2018},
   { "lt",      0,             "<",   0x003c},
   { "macr",    LATIN1_macr,   "-",   0x00af},
-  { "mdash",   0,             "--"         },
+  { "mdash",   0,             "--",  0x2014},
   { "micro",   LATIN1_micro,  "my",  0x00b5},
   { "middot",  LATIN1_middot, ".",   0x00b7},
   { "minus",   0,             "-",   0x2212},
   { "mu",      0,             "m",   0x03bc},
-  { "nabla",   0,             "Nabla"      },
+  { "nabla",   0,             "Nabla",0x2207},
   { "nbsp",    LATIN1_nbsp,   " ",   0x00a0},
-  { "ndash",   0,             "-"          },
+  { "ndash",   0,             "-",   0x2013},
   { "ne",      0,             "!=",  0x2260},
-  { "ni",      0,             "-)"         },
-  { "not",     LATIN1_not,    "NOT"        },
-  { "notin",   0,             "!(-"        },
-  { "nsub",    0,             "!(C"        },
+  { "ni",      0,             "-)",  0x220b},
+  { "not",     LATIN1_not,    "NOT", 0x00ac},
+  { "notin",   0,             "!(-", 0x2209},
+  { "nsub",    0,             "!(C", 0x2284},
   { "ntilde",  LATIN1_ntilde, "n~",  0x00f1},
   { "nu",      0,             "n",   0x03bd},
   { "oacute",  LATIN1_oacute, "o'",  0x00f3},
   { "ocirc",   LATIN1_ocirc,  "o^",  0x00f4},
-  { "oelig",   0,             "oe"         },
+  { "oelig",   0,             "oe",  0x0153},
   { "ograve",  LATIN1_ograve, "o`",  0x00f2},
-  { "oline",   LATIN1_macr,   "-"          },
+  { "oline",   LATIN1_macr,   "-",   0x203e},
   { "omega",   0,             "o",   0x03c9},
   { "omicron", 0,             "o",   0x03bf},
-  { "oplus",   0,             "(+)"        },
-  { "or",      0,             "OR"         },
+  { "oplus",   0,             "(+)", 0x2295},
+  { "or",      0,             "OR",  0x2228},
   { "ordf",    LATIN1_ordf,   "-a",  0x00aa},
   { "ordm",    LATIN1_ordm,   "-o",  0x00ba},
   { "oslash",  LATIN1_oslash, "o/",  0x00f8},
   { "otilde",  LATIN1_otilde, "o~",  0x00f5},
-  { "otimes",  0,             "(x)"        },
+  { "otimes",  0,             "(x)", 0x2297},
   { "ouml",    LATIN1_ouml,   "o\"", 0x00f6},
   { "para",    LATIN1_para,   "P:",  0x00b6},
   { "part",    0,             "PART",0x2202},
   { "permil",  0,             " 0/00",0x2030},
-  { "perp",    0,             "-T"         },
+  { "perp",    0,             "-T",  0x22a5},
   { "phi",     0,             "f",   0x03c6},
   { "pi",      0,             "p",   0x03c0},
-  { "piv",     0,             "Pi"         },
+  { "piv",     0,             "Pi",  0x03d6},
   { "plusmn",  LATIN1_plusmn, "+/-", 0x00b1},
   { "pound",   LATIN1_pound,  "-L-", 0x00a3},
-  { "prime",   0,             "'"          },
+  { "prime",   0,             "'",   0x2032},
   { "prod",    0,             "PROD",0x220f},
-  { "prop",    0,             "0("         },
+  { "prop",    0,             "0(",  0x221d},
   { "psi",     0,             "ps",  0x03c8},
-  { "quot",    0,             "\""         },
-  { "rArr",    0,             "=>"         },
+  { "quot",    0,             "\"",  0x0022},
+  { "rArr",    0,             "=>",  0x21d2},
   { "radic",   0,             "SQRT",0x221a},
-  { "rang",    0,             "/>"         },
-  { "raquo",   LATIN1_raquo,  ">>"         },
+  { "rang",    0,             "/>",  0x232a},
+  { "raquo",   LATIN1_raquo,  ">>",  0x00bb},
   { "rarr",    0,             "->",  0x2192},
 //  { "rceil",   0,             ">|"         },
-  { "rdquo",   0,             "\""         },
-  { "real",    0,             "Re"         },
+  { "rdquo",   0,             "\"",  0x201d},
+  { "real",    0,             "Re",  0x211c},
   { "reg",     LATIN1_reg,    "(R)", 0x00ae},
 //  { "rfloor",  0,             "|>"         },
   { "rho",     0,             "r",   0x03c1},
-  { "rsaquo",  0,             ">"          },
-  { "rsquo",   0,             "'"          },
-  { "sbquo",   0,             "'"          },
+  { "rsaquo",  0,             ">",   0x203a},
+  { "rsquo",   0,             "'",   0x2019},
+  { "sbquo",   0,             "'",   0x201a},
   { "scaron",  0,             "s",   0x0161},
-  { "sdot",    0,             "DOT"        },
+  { "sdot",    0,             "DOT", 0x22c5},
   { "sect",    LATIN1_sect,   "S:",  0x00a7},
-  { "shy",     LATIN1_shy,    ""           },
+  { "shy",     LATIN1_shy,    "",    0x00ad},
   { "sigma",   0,             "s",   0x03c3},
   { "sigmaf",  0,             "s",   0x03c2},
-  { "sim",     0,             "~"          },
+  { "sim",     0,             "~",   0x223c},
 //  { "spades",  0,             "[spades]"   },
-  { "sub",     0,             "(C"         },
-  { "sube",    0,             "(_"         },
+  { "sub",     0,             "(C",  0x2282},
+  { "sube",    0,             "(_",  0x2286},
   { "sum",     0,             "SUM", 0x2211},
-  { "sup",     0,             ")C"         },
+  { "sup",     0,             ")C",  0x2283},
   { "sup1",    LATIN1_sup1,   "^1",  0x00b9},
   { "sup2",    LATIN1_sup2,   "^2",  0x00b2},
   { "sup3",    LATIN1_sup3,   "^3",  0x00b3},
-  { "supe",    0,             ")_"         },
+  { "supe",    0,             ")_",  0x2287},
   { "szlig",   LATIN1_szlig,  "ss",  0x00df},
   { "tau",     0,             "t",   0x03c4},
-  { "there4",  0,             ".:"         },
+  { "there4",  0,             ".:",  0x2234},
   { "theta",   0,             "th",  0x03b8},
   { "thorn",   LATIN1_thorn,  "th",  0x00fe},
   { "tilde",   0,             "~",   0x02dc},
   { "times",   LATIN1_times,  "x",   0x00d7},
   { "trade",   0,             "[TM]",0x2122},
-  { "uArr",    0,             "^^"         },
+  { "uArr",    0,             "^^",  0x21d1},
   { "uacute",  LATIN1_uacute, "u'",  0x00fa},
-  { "uarr",    0,             "^"          },
+  { "uarr",    0,             "^",   0x2191},
   { "ucirc",   LATIN1_ucirc,  "u^",  0x00fb},
   { "ugrave",  LATIN1_ugrave, "u`",  0x00f9},
   { "uml",     LATIN1_uml,    "\"",  0x00a8},
   { "upsilon", 0,             "u",   0x03c5},
   { "uuml",    LATIN1_uuml,   "u\"", 0x00fc},
-  { "weierp",  0,             "P"          },
+  { "weierp",  0,             "P",   0x2118},
   { "xi",      0,             "x",   0x03be},
   { "yacute",  LATIN1_yacute, "y'",  0x00fd},
   { "yen",     LATIN1_yen,    "YEN", 0x00a5},
